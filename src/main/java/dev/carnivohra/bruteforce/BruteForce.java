package dev.carnivohra.bruteforce;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BruteForce {

    private final List<Character> whitelist = new ArrayList<>();
    private int minLength = 1;
    private int maxLength = 16;
    private char[] chars;

    /**
     * Returns the last code that was generated by the
     * generateNextCode() method. If generateNextCode() 
     * has not been called before, this method will return 
     * the initial code to be used for brute forcing.
     *
     * The current code.
     */
    public String getCurrentCode() {
        return new String(chars);
    }

    /**
     * Generates and returns the next code to be used for brute forcing.
     * Each time this method is called, it returns a new code.
     *
     * @return The next code.
     */
    public String generateNextCode() {
        for (int i = chars.length - 1; i >= 0; i--) {
            if (chars[i] == whitelist.getLast()) {
                chars[i] = whitelist.getFirst();

                if (i != 0) continue;

                final char[] newChars = new char[chars.length + 1];
                newChars[0] = whitelist.getFirst();
                System.arraycopy(chars, 0, newChars, 1, chars.length);
                chars = newChars;
                return new String(chars);
            }

            chars[i] = whitelist.get(whitelist.indexOf(chars[i]) + 1);
            return new String(chars);
        }

        return null;
    }

    /**
     * Resets the current code to its default state.
     * The minimum and maximum lengths of the codes to be generated
     * remain unchanged by this method. The whitelist will also 
     * not be cleared.
     */
    public void reset() {
        chars = new char[minLength];
        for (int i = 0; i < minLength; i++) chars[i] = whitelist.getFirst();
    }

    /**
     * Adds a character to the list of allowed characters for generation.
     *
     * @param character The character to be added to the whitelist.
     */
    public void addToWhitelist(Character character) {
        if (whitelist.contains(character)) return;
        whitelist.add(character);
        reset();
    }

    /**
     * Adds multiple characters to the list of allowed characters for generation.
     *
     * @param characters The characters to be added to the whitelist.
     */
    public void addToWhitelist(Character[] characters) {
        for (char character : characters) addToWhitelist(character);
    }

    /**
     * Adds all characters from a string value to the list of allowed characters for generation.
     *
     * @param string The string containing characters to be added to the whitelist.
     */
    public void addToWhitelist(String string) {
        for (int i = 0; i < string.length(); i++) {
            final char character = string.charAt(i);
            addToWhitelist(character);
        }
    }

    /**
     * Removes a character from the list of allowed characters for generation.
     *
     * @param character The character to be removed from the whitelist.
     */
    public void removeFromWhitelist(Character character) {
        if (!whitelist.contains(character)) return;
        whitelist.remove(character);
        reset();
    }

    /**
     * Removes multiple characters from the list of allowed characters for generation.
     *
     * @param characters The characters to be removed from the whitelist.
     */
    public void removeFromWhitelist(Character[] characters) {
        for (char character : characters) removeFromWhitelist(character);
    }

    /**
     * Removes all characters from a string value from the list of allowed characters for generation.
     *
     * @param string The string containing characters to be removed from the whitelist.
     */
    public void removeFromWhitelist(String string) {
        for (int i = 0; i < string.length(); i++) {
            final char character = string.charAt(i);
            removeFromWhitelist(character);
        }
    }

    /**
     * Clears all entries from the list of allowed characters for generation.
     * Clearing the whitelist resets the entire brute force process,
     * so avoid clearing the whitelist while brute forcing.
     */
    public void clearWhitelist() {
        whitelist.clear();
        reset();
    }

    /**
     * Returns the list of all allowed characters for generation.
     *
     * @return The list of allowed characters.
     */
    public List<Character> getWhitelist() {
        return whitelist;
    }

    /**
     * Returns the minimum length of the codes to be generated.
     * The default minimum length value is 1.
     * 
     * @return The minimum length.
     */
    public int getMinLength() {
        return minLength;
    }

    /**
     * Sets the minimum length of the codes to be generated.
     * Changing the length resets the entire brute force process,
     * so avoid changing the minimum length while brute forcing.
     * The default minimum length is 1.
     */
    public void setMinLength(int length) {
        this.minLength = length;
        reset();
    }

    /**
     * Returns the maximum length of the codes to be generated.
     * The default maximum length value is 16.
     *
     * @return The maximum length.
     */
    public int getMaxLength() {
        return maxLength;
    }

    /**
     * Sets the maximum length of the codes to be generated.
     * Changing the length resets the entire brute force process,
     * so avoid changing the maximum length while brute forcing.
     * The default maximum length is 16.
     */
    public void setMaxLength(int length) {
        this.maxLength = length;
        reset();
    }

}
